{"ast":null,"code":"import { createRenderStep } from './render-step.mjs';\nvar stepsOrder = [\"prepare\", \"read\", \"update\", \"preRender\", \"render\", \"postRender\"];\nvar maxElapsed = 40;\nfunction createRenderBatcher(scheduleNextBatch, allowKeepAlive) {\n  var runNextFrame = false;\n  var useDefaultElapsed = true;\n  var state = {\n    delta: 0,\n    timestamp: 0,\n    isProcessing: false\n  };\n  var steps = stepsOrder.reduce(function (acc, key) {\n    acc[key] = createRenderStep(function () {\n      return runNextFrame = true;\n    });\n    return acc;\n  }, {});\n  var processStep = function processStep(stepId) {\n    return steps[stepId].process(state);\n  };\n  var processBatch = function processBatch() {\n    var timestamp = performance.now();\n    runNextFrame = false;\n    state.delta = useDefaultElapsed ? 1000 / 60 : Math.max(Math.min(timestamp - state.timestamp, maxElapsed), 1);\n    state.timestamp = timestamp;\n    state.isProcessing = true;\n    stepsOrder.forEach(processStep);\n    state.isProcessing = false;\n    if (runNextFrame && allowKeepAlive) {\n      useDefaultElapsed = false;\n      scheduleNextBatch(processBatch);\n    }\n  };\n  var wake = function wake() {\n    runNextFrame = true;\n    useDefaultElapsed = true;\n    if (!state.isProcessing) {\n      scheduleNextBatch(processBatch);\n    }\n  };\n  var schedule = stepsOrder.reduce(function (acc, key) {\n    var step = steps[key];\n    acc[key] = function (process) {\n      var keepAlive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var immediate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      if (!runNextFrame) wake();\n      return step.schedule(process, keepAlive, immediate);\n    };\n    return acc;\n  }, {});\n  var cancel = function cancel(process) {\n    return stepsOrder.forEach(function (key) {\n      return steps[key].cancel(process);\n    });\n  };\n  return {\n    schedule: schedule,\n    cancel: cancel,\n    state: state,\n    steps: steps\n  };\n}\nexport { createRenderBatcher, stepsOrder };","map":null,"metadata":{},"sourceType":"module"}